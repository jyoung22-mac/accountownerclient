{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Inputs/Input.js","Utility/InputConfiguration.js","Utility/FormUtility.js","containers/Owner/UpdateOwner/UpdateOwner.js"],"names":["handleHTTPError","error","props","response","status","type","actionTypes","execute404Handler","execute500Handler","executeOtherErrorHandler","closeErrorModal","instance","axios","create","baseURL","headers","headerType","getData","url","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","SuccessModal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","ErrorModal","closeModal","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","returnInputConfiguration","name","element","validation","required","maxLength","valid","address","dateOfBirth","moment","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","validationResponse","validationObject","isValid","trim","length","checkValidity","countInvalidElements","ownerForm","UpdateOwner","state","isFormValid","componentWillMount","setState","componentDidMount","match","params","onGetOwnerById","componentWillReceiveProps","nextProps","nameObject","dateObject","addressObject","handleChangeEvent","formUtilityActions","counter","redirectToOwnerList","history","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","this","horizontal","onSubmit","map","mdOffset","md","disabled","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","Component","connect","repository","errorHandler","repositoryActions","owner"],"mappings":"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","file":"static/js/7.be1cd263.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\n\nconst execute404Handler = (props) => {\n    return {\n        type: actionTypes.HTTP_404_ERROR,\n        props: props\n    }\n}\n\nconst execute500Handler = (props) => {\n    return {\n        type: actionTypes.HTTP_500_ERROR,\n        props: props\n    }\n}\n\nconst executeOtherErrorHandler = (error) => {\n    return {\n        type: actionTypes.HTTP_OTHER_ERROR,\n        error: error\n    }\n}\n\nexport const handleHTTPError = (error, props) => {\n    if (error.response.status === 404) {\n        return execute404Handler(props);\n    }\n    else if (error.response.status === 500) {\n        return execute500Handler(props);\n    }\n    else {\n        return executeOtherErrorHandler(error);\n    }\n}\n\nexport const closeErrorModal = () => {\n    return {\n        type: actionTypes.CLOSE_ERROR_MODAL\n    }\n}","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://brokerage.herokuapp.com',\n    headers: {\n        headerType: 'example header type'\n    }\n});\n\nexport default instance;","import * as actionTypes from './actionTypes';\nimport axios from '../../axios/axios';\nimport * as errorHandlerActions from './errorHandlerActions';\n\n\n\nconst getDataSuccess = (data) => {\n    return {\n        type: actionTypes.GET_DATA_SUCCESS,\n        data: data\n    }\n}\n\nexport const getData = (url, props) => {\n    return (dispatch) => {\n        axios.get(url)\n        .then(response => {\n            dispatch(getDataSuccess(response.data));\n        })\n        .catch(error => {\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\n        })\n    }\n}\n\nconst postDataSuccess = (response) => {\n    return {\n        type: actionTypes.POST_DATA_SUCCESS,\n        response: response\n    }\n}\n\nexport const postData = (url, obj, props) => {\n    return (dispatch) => {\n        axios.post(url, obj)\n        .then(response => {\n            dispatch(postDataSuccess(response));\n        })\n        .catch(error => {\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\n        })\n    }\n}\n\nconst putDataSuccess = (response) => {\n    return {\n        type: actionTypes.PUT_DATA_SUCCESS,\n        response: response\n    }\n}\n\nexport const putData = (url, obj, props) => {\n    return (dispatch) => {\n        axios.put(url, obj)\n        .then(response => {\n            dispatch(putDataSuccess(response));\n        })\n        .catch(error => {\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\n        })\n    }\n}\n\nconst deleteDataSuccess = (response) => {\n    return {\n        type: actionTypes.DELETE_DATA_SUCCESS,\n        response: response\n    }\n}\n\nexport const deleteData = (url, props) => {\n    return (dispatch) => {\n        axios.delete(url)\n        .then(response => {\n            dispatch(deleteDataSuccess(response));\n        })\n        .catch(error => {\n            \n            dispatch(errorHandlerActions.handleHTTPError(error, props));\n        })\n    }\n}\n\nexport const closeSuccessModal = (url, props) =>{\n    return {\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\n        props: props,\n        url: url\n    }\n}\n","import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport '../ModalStyles.css';\n\nconst SuccessModal = (props) => {\n    return (\n        \n            <Modal show={props.show} backdrop='static'>\n                <Modal.Header>\n                    {props.modalHeaderText}\n                </Modal.Header>\n                <Modal.Body>\n                    <p>{props.modalBodyText}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\n                </Modal.Footer>\n            </Modal>\n      \n    )\n}\n\nexport default SuccessModal;","import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport '../ModalStyles.css';\n\nconst ErrorModal = (props) => {\n    return (\n     \n            <Modal show={props.show} backdrop='static'>\n                <Modal.Header>\n                    {props.modalHeaderText}\n                </Modal.Header>\n                <Modal.Body>\n                    <p>{props.modalBodyText}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\n                </Modal.Footer>\n            </Modal>\n        \n    )\n}\n\nexport default ErrorModal;","import React from 'react';\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Input.css';\n\nconst input = (props) => {\n    let inputField = null;\n    let errorMessage = null;\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        errorMessage = (<em>{props.errorMessage}</em>);\n    }\n\n    switch (props.elementType) {\n        case 'input':\n            inputField = (\n                <FormGroup controlId={props.id}>\n                    <Col componentClass={ControlLabel} sm={2}>\n                        {props.label}\n                    </Col>\n                    <Col sm={6}>\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\n                    </Col>\n                    <Col>\n                        <em>{errorMessage}</em>\n                    </Col>\n                </FormGroup>\n            )\n            break;\n        case 'datePicker':\n            inputField = (\n                <FormGroup controlId={props.id}>\n                    <Col componentClass={ControlLabel} sm={2}>\n                        {props.label}\n                    </Col>\n                    <Col sm={6}>\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\n                            onChange={props.changed} className='datePickerControl'\n                            showYearDropdown dropdownMode=\"select\" />\n                    </Col>\n                    <Col>\n                        <em>{errorMessage}</em>\n                    </Col>\n                </FormGroup>\n            )\n            break;\n        default: inputField = null;\n    }\n\n    return (\n        <>\n            {inputField}\n        </>\n    )\n}\n\nexport default input;","import moment from 'moment';\n\nexport const returnInputConfiguration = () => {\n    return {\n        name: {\n            element: 'input', type: 'text', value: '',\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\n            errorMessage: '', label: 'Name:'\n        },\n        address: {\n            element: 'input', type: 'text', value: '',\n            validation: { required: true, maxLength: 100 }, valid: false, touched: false,\n            errorMessage: '', label: 'Address:'\n        },\n        dateOfBirth: {\n            element: 'datePicker', type: 'text', value: moment(),\n            valid: true, touched: false,\n            errorMessage: '', label: 'Date of birth:'\n        }\n    }\n}","export const convertStateToArrayOfFormObjects = (formObject) => {\n    const formElementsArray = [];\n    for (let key in formObject) {\n        formElementsArray.push({\n            id: key,\n            config: formObject[key]\n        });\n    }\n    return formElementsArray;\n}\n\n    const checkValidity = (value, validation) => {\n        let validationObject = {\n            isValid: true,\n            errorMessage: ''\n        };\n    \n        if (validation) {\n            if (validation.required) {\n                validationObject.isValid = value.trim() !== '';\n                validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\n            }\n    \n            if (validationObject.isValid && validation.maxLength) {\n                validationObject.isValid = value.length <= validation.maxLength;\n                validationObject.errorMessage = validationObject.isValid ? '' : `Not allowed more than ${validation.maxLength} characters`;\n            }\n    \n            return validationObject;\n        }\n        else {\n            return validationObject;\n        }\n    }\n\n    \n\n   \n\n\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\n    let formElement = { ...updatedOwnerForm[id] };\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\n    formElement.touched = true;\n\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\n\n    formElement.valid = validationResponse.isValid;\n    formElement.errorMessage = validationResponse.errorMessage;\n\n    return formElement;\n}\n\nexport const countInvalidElements = (ownerForm) => {\n    let countInvalidElements = 0;\n    for (let element in ownerForm) {\n        if (!ownerForm[element].valid) {\n            countInvalidElements = countInvalidElements + 1;\n            break;\n        }\n    }\n    return countInvalidElements;\n}","import React, { Component } from 'react';\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\nimport * as formUtilityActions from '../../../Utility/FormUtility';\nimport Input from '../../../UI/Inputs/Input';\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\n\nclass UpdateOwner extends Component {\n    state = {\n        ownerForm: {},\n        isFormValid: true\n    }\n\n    componentWillMount = () => {\n        this.setState({ ownerForm: returnInputConfiguration() });\n    }\n\n    componentDidMount = () => {\n        const id = this.props.match.params.id;\n        const url = '/api/owner/' + id;\n        this.props.onGetOwnerById(url, { ...this.props });\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        const updatedOwnerForm = { ...this.state.ownerForm };\n        let nameObject = { ...updatedOwnerForm.name };\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\n        let addressObject = { ...updatedOwnerForm.address };\n    \n        nameObject.value = nextProps.data.name;\n        nameObject.valid = true;\n        dateObject.value = moment(nextProps.data.dateOfBirth);\n        addressObject.value = nextProps.data.address;\n        addressObject.valid = true;\n    \n        updatedOwnerForm['name'] = nameObject;\n        updatedOwnerForm['dateOfBirth'] = dateObject;\n        updatedOwnerForm['address'] = addressObject;\n        this.setState({ ownerForm: updatedOwnerForm });\n    }\n\n    handleChangeEvent = (event, id) => {\n        const updatedOwnerForm = { ...this.state.ownerForm };\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\n\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\n\n        this.setState({ ownerForm: updatedOwnerForm, isFormValid: counter === 0 })\n    }\n    \n    redirectToOwnerList = () => {\n        this.props.history.push('/owner-List');\n    }\n    \n    updateOwner = (event) => {\n        event.preventDefault();\n    \n        const ownerToUpdate = {\n         name: this.state.ownerForm.name.value,\n        dateOfBirth: this.state.ownerForm.dateOfBirth.value,\n        address: this.state.ownerForm.address.value\n        }\n    \n        const url = \"/api/owner/\" + this.props.data.id;\n    \n        this.props.onUpdateOwner(url, ownerToUpdate, {...this.props});\n    }\n\n\n    render() {\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\n        return (\n            <Well>\n\n                <Form horizontal onSubmit={this.updateOwner}>\n                    {\n                        formElementsArray.map(element => {\n                            return <Input key={element.id} elementType={element.config.element}\n                                id={element.id} label={element.config.label}\n                                type={element.config.type} value={element.config.value}\n                                changed={(event) => this.handleChangeEvent(event, element.id)}\n                                errorMessage={element.config.errorMessage} invalid={!element.config.valid}\n                                shouldValidate={element.config.validation}\n                                touched={element.config.touched}\n                                blur={(event) => this.handleChangeEvent(event, element.id)} />\n                        })\n                    }\n                    <br />\n                    <FormGroup>\n                        <Col mdOffset={6} md={1}>\n                            <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\n                        </Col>\n                        <Col md={1}>\n                            <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\n                    modalBodyText={'Action completed successfully'}\n                    okButtonText={'OK'}\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\n                    modalBodyText={this.props.errorMessage}\n                    okButtonText={'OK'}\n                    closeModal={() => this.props.onCloseErrorModal()} />\n\n            </Well>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        data: state.repository.data,\n        showSuccessModal: state.repository.showSuccessModal,\n        showErrorModal: state.errorHandler.showErrorModal,\n        errorMessage: state.errorHandler.errorMessage\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(url, props)),\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);\n"],"sourceRoot":""}